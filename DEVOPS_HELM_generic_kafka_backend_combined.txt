==== ./values.yaml ====

# values.yaml
module: kafka
environment: generic
replicas: 3

containers:
  name: kafka
  image: bitnami/kafka
  tags: latest
  ports:
    containerPort: 9092
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

service:
  type: ClusterIP
  port: 9092
  targetPort: 9092

volumes:
  - name: kafka-data
    persistentVolumeClaim:
      claimName: kafka-data
  - name: kafka-config
    configMap:
      name: kafka-config

persistentVolume:
  size: 1Gi

volumeMounts:
  - name: kafka-data
    mountPath: /bitnami/kafka/data
  - name: kafka-config
    mountPath: /opt/bitnami/kafka/config/server.properties
    subPath: server.properties

zookeeper:
  enabled: true
  replicaCount: 3
  persistence:
    enabled: true
    size: 5Gi
    

server: 
  file: "server.properties"


==== ./Chart.yaml ====

apiVersion: v2
name: generic-kafka-backend
description: A Helm chart for kubernetes - Generic kafka backend

# A chart can be either an 'application' or a 'library' chart.
#
# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
#
# Library charts provide useful utilities or functions for the chart developer. They're included as
# a dependency of application charts to inject those utilities and functions into the rendering
# pipeline. Library charts do not define any templates and therefore cannot be deployed.
type: application

# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: 0.1.2

# This is the version number of the application being deployed. This version number should be
# incremented each time you make changes to the application. Versions are not expected to
# follow Semantic Versioning. They should reflect the version the application is using.
# It is recommended to use it with quotes.
appVersion: "1.1.0"

==== ./.github/workflows/ci.yml ====

name: CI

on:
  push:
    branches: 
      - main

env:
  BRANCH_PAGES: github-pages

permissions:
  contents: write
  packages: write  # Allows pushing images to the GitHub Container Registry

jobs:
  release-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Publish Helm chart
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: ..
          target_dir: .
          branch: ${{ env.BRANCH_PAGES }}
          charts_url: https://raw.githubusercontent.com/${{ github.repository }}/${{ env.BRANCH_PAGES }}
          linting: false
          
      - name: summary 
        run: echo "https://raw.githubusercontent.com/${{ github.repository }}/${{ env.BRANCH_PAGES }}"
      



==== ./.github/workflows/repo-initialization.yml ====

name: Repository initialization

on:
  repository_dispatch:
    types: [initialize]
    
  workflow_dispatch:

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  create-branches:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Create release/uat branch
      if:  ${{startsWith(env.REPO_NAME, 'DEVOPS_') || startsWith(env.REPO_NAME, 'INF_') || startsWith(env.REPO_NAME, 'DEV_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: refs/heads/release/uat

    - name: Create release/prod branch
      if:  ${{startsWith(env.REPO_NAME, 'DEVOPS_') || startsWith(env.REPO_NAME, 'INF_') || startsWith(env.REPO_NAME, 'DEV_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: refs/heads/release/prod

    - name: Create github-pages branch
      if: ${{startsWith(env.REPO_NAME, 'DEVOPS_HELM_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: github-pages

    - name: Create DEV branch
      if: ${{startsWith(env.REPO_NAME, 'QUA_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: DEV

    - name: Create prod branch
      if: ${{startsWith(env.REPO_NAME, 'QUA_')}}
      uses: peterjgrainger/action-create-branch@v2.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: prod


==== ./templates/configmap.yaml ====

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: {{ .Values.module }}-{{ .Values.environment }}
  labels:
    app.kubernetes.io/instance: {{ .Values.module }}-{{ .Values.environment }}
data:
  server.properties: |
{{ .Files.Get .Values.server.file | indent 4 }}

==== ./templates/service.yaml ====

# service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.module }}-{{ .Values.environment }}-service
  labels:
    {{-  include "label-generator" . | nindent 4 }}
    module: {{ .Values.module }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
      protocol: TCP
      name: kafka
  selector:
    app: {{ .Values.module }}-{{ .Values.environment }}

==== ./templates/deployment.yaml ====

# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{-  include "label-generator" . | nindent 4 }}
    module: {{ .Values.module }}
  name: {{ .Values.module }}-{{ .Values.environment }}-deployment
  namespace: {{ .Values.module }}-{{ .Values.environment }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.module }}-{{ .Values.environment }}
  template:
    metadata:
      labels:
        app: {{ .Values.module }}-{{ .Values.environment }}
    spec:
      containers:
        - name: {{ .Values.containers.name }}
          image: {{ .Values.containers.image }}:{{ .Values.containers.tags }}
          ports:
            - containerPort: {{ .Values.containers.ports.containerPort }}
          resources:
            {{- toYaml .Values.containers.resources | nindent 12 }}
          volumeMounts:
            {{- toYaml .Values.volumeMounts | nindent 12 }}

==== ./templates/pvc.yaml ====

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-data
  namespace: {{ .Values.module }}-{{ .Values.environment }}
  labels:
    {{- include "label-generator" . | nindent 4 }}
    module: {{ .Values.module }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.persistentVolume.size | default "1Gi" }}

